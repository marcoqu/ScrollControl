import { SyncEvent } from 'ts-events';
import { DragListenerOptions } from './DragListener';
import { WheelListenerOptions } from './WheelListener';
import { KeyboardListenerOptions } from './KeyboardListener';
declare type EasingFn = (prevDestination: number, destination: number, options: ScrollControlOptions) => (pos: number) => number;
export declare type ScrollingMode = 'continous' | 'discrete' | 'snapped';
export declare type ScrollControlOptions = WheelListenerOptions & DragListenerOptions & KeyboardListenerOptions & {
    mode?: ScrollingMode;
    easingFn?: EasingFn;
    speedFactor?: number;
    accelleration?: number;
    snapThreshold?: number;
    waitTime?: number;
    tolerance?: number;
};
export declare class ScrollControl {
    private static DEFAULT_OPTIONS;
    boundsChanged: SyncEvent<[number, number]>;
    positionChanged: SyncEvent<number>;
    destinationChanged: SyncEvent<number>;
    private _bounds;
    private _element;
    private _prevSnapDestination;
    private _snapDestination;
    private _prevDestination;
    private _destination;
    private _position;
    private _snapPositions;
    private _uniqueSnapPositions;
    private _throttleTimer?;
    private _ticker;
    private _wheelListener;
    private _dragListener;
    private _keyboardListener;
    private _options;
    constructor(element: HTMLElement, options?: ScrollControlOptions);
    enable(): void;
    disable(): void;
    setOptions(options: ScrollControlOptions): void;
    getPosition(): number;
    setPosition(value: number): void;
    getBounds(): [number, number];
    setBounds(value: [number, number]): void;
    getDestination(): number;
    getSnapDestination(): number;
    setDestination(value: number): void;
    setSnapPositions(positions: number[]): void;
    getSnapPositions(): number[];
    reset(): void;
    private _stayWithinBounds;
    private _makeTickHandler;
    private _onMoved;
    private _getNextSnapPosition;
    private _calcUniqueSnapPositions;
    private _snapToPoint;
}
export declare function noEasing(prevDestination: number, destination: number): (pos: number) => number;
export declare function accelleratingFn(accelleration: number): EasingFn;
export declare function fixedTime(ticks: number, easing?: (t: number) => number): EasingFn;
export declare function fixedSpeed(speed: number, easing?: (t: number) => number): EasingFn;
export {};
